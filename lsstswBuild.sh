#!/bin/bash
#  Install the DM code stack using the lsstsw package procedure: rebuild

# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
#  This script modifies the actual DM stack on the cluster. It therefore
#  explicitly checks literal strings to ensure that non-standard buildbot
#  expectations regarding the 'work' directory location are  equivalent.
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

set -e

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
# shellcheck source=./settings.cfg.sh
source "${SCRIPT_DIR}/settings.cfg.sh"
# shellcheck source=../lsstsw/bin/setup.sh
source "${LSSTSW}/bin/setup.sh"

# Reuse an existing lsstsw installation
BUILD_DOCS=true
RUN_DEMO=true
PRODUCT=""
NO_FETCH=false
COLORIZE=false

# Buildbot remotely invokes scripts with a stripped down environment.
umask 002

# shellcheck disable=SC2183
sbar=$(printf %78s |tr " " "-")
# shellcheck disable=SC2183
tbar=$(printf %78s |tr " " "~")

set_color() {
  if [[ $COLORIZE == true ]]; then
    echo -ne "$@"
  fi
}

no_color() {
  if [[ $COLORIZE == true ]]; then
    echo -ne "$NO_COLOR"
  fi
}

print_success() {
  set_color "$LIGHT_GREEN"
  echo -e "$@"
  no_color
}

print_info() {
  set_color "$YELLOW"
  echo -e "$@"
  no_color
}

# XXX this script is very inconsistent about what is sent to stdout vs stderr
print_error() {
  set_color "$LIGHT_RED"
  >&2 echo -e "$@"
  no_color
}

fail() {
  local code=${2:-1}
  [[ -n $1 ]] && print_error "$1"
  # shellcheck disable=SC2086
  exit $code
}

start_section() {
  print_info "### $*"
  print_info "$tbar"
}

end_section() {
  print_info "$sbar"
  echo -ne "\n"
}

# XXX REF_LIST and PRODUCT would be better handled as arrays
# shellcheck disable=SC2054 disable=SC2034
options=(getopt --long branch:,product:,skip_docs,skip_demo,no-fetch,print-fail,color -- "$@")
while true
do
  case "$1" in
    --branch)       BRANCH=$2         ; shift 2 ;;
    --product)      PRODUCT=$2        ; shift 2 ;;
    --skip_docs)    BUILD_DOCS=false  ; shift 1 ;;
    --skip_demo)    RUN_DEMO=false    ; shift 1 ;;
    --no-fetch)     NO_FETCH=true     ; shift 1 ;;
    --color)        COLORIZE=true     ; shift 1 ;;
    --) shift; break;;
    *) [[ "$*" != "" ]] && fail "Unknown option: $1"
       break;;
  esac
done

# mangle whitespace and prepend ` -r ` in front of each ref
REF_LIST=$(echo "$BRANCH" | sed  -e "s/ \+ / /g" -e "s/^/ /" -e "s/ $//" -e "s/ / -r /g")


#
# display configuration
#
start_section "configuration"

# print "settings"
settings=(
  BRANCH
  BUILD_DOCS
  COLORIZE
  DOC_PUSH_PATH
  DOC_REPO_DIR
  DOC_REPO_NAME
  DOC_REPO_URL
  LSSTSW
  LSSTSW_BUILD_DIR
  NO_FETCH
  PRODUCT
  REF_LIST
  RUN_DEMO
)

set_color "$LIGHT_CYAN"
for i in ${settings[*]}
do
  echo "${i}: ${!i}"
done
no_color

end_section # configuration


#
# display environment variables
#
start_section "environment"
set_color "$LIGHT_CYAN"
printenv
no_color
end_section # environment


#
# build with <lsstsw>/bin/rebuild
#
start_section "build"

if [[ ! -x ${LSSTSW}/bin/rebuild ]]; then
  fail "Failed to find 'rebuild'."
fi

print_info "Rebuild is commencing....stand by; using $REF_LIST"

ARGS=()
if [[ $NO_FETCH == true ]]; then
  ARGS+=("-n")
fi
if [[ ! -z $REF_LIST ]]; then
  # XXX intentionally not quoted to allow word splitting
  ARGS+=($REF_LIST)
fi
if [[ ! -z $PRODUCT ]]; then
  # XXX intentionally not quoted to allow word splitting
  ARGS+=($PRODUCT)
fi
set -e

if ! "${LSSTSW}/bin/rebuild" "${ARGS[@]}"; then
  print_error "Failed during rebuild of DM stack."
fi

# manifest.txt generated by lsst_build
MANIFEST=${LSSTSW_BUILD_DIR}/manifest.txt

# Set current build tag (also used as eups tag per installed package).
eval "$(grep -E '^BUILD=' "$MANIFEST" | sed -e 's/BUILD/TAG/')"

print_success "The DM stack has been installed at $LSSTSW with tag: $TAG."

end_section # build

#
# Build doxygen documentation
#
if [[ $BUILD_DOCS == true ]]; then
  start_section "doc build"

  print_info "Start Documentation build at: $(date)"
  set +e
  "${SCRIPT_DIR}/create_xlinkdocs.sh" --type "master" --path "$DOC_PUSH_PATH"
  RET=$?
  set -e

  if [[ $RET -ne 0 ]]; then
    fail "*** FAILURE: Doxygen document was not installed."
  fi
  print_success "Doxygen Documentation was installed successfully."

  end_section # doc build"
else
  print_info "Skipping Documentation build."
fi


#
# Finally run a simple test of package integration
#
if [[ $RUN_DEMO == true ]]; then
  start_section "demo"

  # run demo script from the source checkout dir as it will download and
  # unpack a tarball
  cd "$LSSTSW_BUILD_DIR"

  print_info "Start Demo run at: $(date)"
  if ! "${SCRIPT_DIR}/runManifestDemo.sh" --tag "$TAG" --small; then
    fail "*** There was an error running the simple integration demo."
  fi
  print_success "The simple integration demo was successfully run."

  end_section # demo
else
  print_info "Skipping Demo."
fi

# vim: tabstop=2 shiftwidth=2 expandtab
